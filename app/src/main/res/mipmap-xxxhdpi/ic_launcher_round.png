package com.goblo.skripshit.laporan.pelanggan;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SearchView;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.drawable.DrawableCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.room.Room;

import com.goblo.skripshit.AppDatabase;
import com.goblo.skripshit.FileUtils;
import com.goblo.skripshit.PermissionChecker;
import com.goblo.skripshit.PermissionsActivity;
import com.goblo.skripshit.R;
import com.goblo.skripshit.master.pelanggan.Pelanggan;
import com.goblo.skripshit.master.pelanggan.RecyclerPelangganAdapter;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import static com.goblo.skripshit.LogUtils.LOGE;
import static com.goblo.skripshit.PermissionChecker.REQUIRED_PERMISSION;
import static com.goblo.skripshit.PermissionsActivity.PERMISSION_REQUEST_CODE;

public class LaporanPelangganList extends AppCompatActivity {
    private RecyclerView recyclerView;
    private RecyclerView.LayoutManager layoutManager;
    private RecyclerPelangganAdapter pelangganAdapter;
    private AppDatabase database;
    private ArrayList<Pelanggan> daftarpelanggan;
    private SearchView txt_cari;
    private Toolbar tulbar;
    private TextView txt_jml_pelanggan;
    private Button btn_exportpdf;
    private PermissionChecker checker;
    private Context context;
    private Pelanggan pelanggan;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_laporan_list_pelanggan);
        context=getApplicationContext();
        tulbar=findViewById(R.id.tulbar_laporanpelanggan);
        setSupportActionBar(tulbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("Laporan Pelanggan");
        recyclerView=findViewById(R.id.recycler_laporanpelanggan);
        daftarpelanggan = new ArrayList<>();
        database = Room.databaseBuilder(getApplicationContext(), AppDatabase.class, "dbLaundry").allowMainThreadQueries().build();
        daftarpelanggan.addAll(Arrays.asList(database.pelangganDAO().readDataPelanggan()));
        recyclerView.setHasFixedSize(true);
        layoutManager = new LinearLayoutManager(this);
        recyclerView.setLayoutManager(layoutManager);
        pelangganAdapter=new RecyclerPelangganAdapter(daftarpelanggan, LaporanPelangganList.this);
        recyclerView.setAdapter(pelangganAdapter);
        int jumlahpelanggan=daftarpelanggan.size();
        txt_jml_pelanggan=findViewById(R.id.jml_pelanggan);
        txt_jml_pelanggan.setText("Jumlah pelanggan terdaftar : "+jumlahpelanggan);
        txt_cari=findViewById(R.id.txt_cari_laporanpelanggan);
        txt_cari.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                pelangganAdapter.getFilter().filter(query);
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                pelangganAdapter.getFilter().filter(newText);
                return false;
            }
        });
        btn_exportpdf=findViewById(R.id.export_pdf);
        btn_exportpdf.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                checker=new PermissionChecker(context);
                //createPdf(FileUtils.getAppPath(context)+"Laporan_Pelanggan.pdf");
                if(checker.lacksPermissions(REQUIRED_PERMISSION)){
                    PermissionsActivity.startActivityForResult(LaporanPelangganList.this,PERMISSION_REQUEST_CODE,REQUIRED_PERMISSION);
                }else {
                    createPdf(FileUtils.getAppPath(context)+"Laporan_Pelanggan.pdf");
                }
            }
        });
    }

    public void createPdf(String desc){
        if(new File(desc).exists()){
            new File(desc).delete();
        }
        try{
            Document doc=new Document();
            PdfWriter.getInstance(doc, new FileOutputStream(desc));
            doc.open();
            doc.setPageSize(PageSize.A4);
            doc.addCreationDate();
            doc.addAuthor("GREEN LAB");
            doc.addCreator("Abdul Rosyi");
            addTableLuar(doc);
            //addTable(doc);
            doc.close();
            Toast.makeText(context,"Laporan sedang dimuat",Toast.LENGTH_SHORT).show();
            FileUtils.openFile(context, new File(desc));
        }catch (IOException | DocumentException ie){
            LOGE("createPdf: Error"+ie.getLocalizedMessage());
        }catch (ActivityNotFoundException ae){
            Toast.makeText(context,"Tidak ada aplikasi yang support untuk membuka file ini",Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data){
        super.onActivityResult(requestCode,resultCode,data);
        if(resultCode== PermissionsActivity.PERMISSION_GRANTED){
            Toast.makeText(context,"Permission diizinkan",Toast.LENGTH_SHORT).show();
        }else {
            Toast.makeText(context,"Gagal, permission tidak diizinkan",Toast.LENGTH_SHORT).show();
        }
    }

    private static Bitmap getBitmapFromVectorDrawable(Context context, int drawableId){
        Drawable drawble1= ContextCompat.getDrawable(context,drawableId);
        if(Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP){
            drawble1=(DrawableCompat.wrap(drawble1)).mutate();
        }
        Bitmap bitmap=Bitmap.createBitmap(drawble1.getIntrinsicWidth(),drawble1.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
        Canvas canvas= new Canvas(bitmap);
        drawble1.setBounds(0,0, canvas.getWidth(),canvas.getHeight());
        drawble1.draw(canvas);
        return bitmap;
    }

    private void addImagePage(Document doc) throws DocumentException, IOException {
        Bitmap bitmap=getBitmapFromVectorDrawable(context,R.drawable.logo_fix);
        ByteArrayOutputStream stream= new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG,100,stream);
        Image image=Image.getInstance(stream.toByteArray());
        float documentWidth=doc.getPageSize().getWidth()-doc.leftMargin()-doc.rightMargin();
        float documentHeight=doc.getPageSize().getHeight()-doc.topMargin()-doc.bottomMargin();
        image.scaleToFit(doc.getPageSize().getWidth(),300);
        image.setAbsolutePosition(500f,10f);
        image.setAlignment(Element.ALIGN_CENTER);
        doc.add(image);
    }
    private void addTableLuar(Document doc) throws  DocumentException, IOException{
        PdfPTable tabelluar=new PdfPTable(2);
        tabelluar.getDefaultCell().setFixedHeight(100);
        tabelluar.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
        Bitmap bitmap=getBitmapFromVectorDrawable(context,R.drawable.logo_fix);
        ByteArrayOutputStream stream= new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG,100,stream);
        Image image=Image.getInstance(stream.toByteArray());
        PdfPTable tabel=new PdfPTable(4);
        tabel.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        tabel.getDefaultCell().setFixedHeight(30);
        tabel.getDefaultCell().setVerticalAlignment(Element.ALIGN_MIDDLE);
        tabel.addCell("Nomer");
        tabel.addCell("Nama");
        tabel.addCell("Alamat");
        tabel.addCell("No.Telepon");
        List<Pelanggan> datapelanggan=database.pelangganDAO().bacaDataPelanggan();
        for(Pelanggan p: datapelanggan){
            tabel.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            tabel.getDefaultCell().setVerticalAlignment(Element.ALIGN_MIDDLE);
            Long nomer=p.getNomer();
            tabel.addCell(String.valueOf(nomer));
            String nama=p.getNama();
            tabel.addCell(nama);
            String alamat=p.getAlamat();
            tabel.addCell(alamat);
            String telp=p.getTelp();
            tabel.addCell(telp);
        }
        tabelluar.getDefaultCell().setVerticalAlignment(Element.ALIGN_MIDDLE);
        tabelluar.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
        tabelluar.addCell(image);
        tabelluar.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
        tabelluar.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        Phrase phrase=new Phrase("GREEN LAB LAUNDRY");
        tabelluar.addCell(phrase);
        PdfPCell celltabel=new PdfPCell(tabel);
        tabelluar.addCell(tabel);

        tabelluar.addCell(new Paragraph());
        doc.add(tabelluar);
    }

    private static void addTittlePage(Document doc) throws DocumentException {
            Paragraph paragraph=new Paragraph();
            paragraph.add(new Paragraph("GREENLAB",new Font(Font.FontFamily.TIMES_ROMAN,18,Font.BOLD)));
            addEmptyLine(paragraph,1);
            paragraph.add(new Paragraph("Laporan : "+new Date(),new Font(Font.FontFamily.TIMES_ROMAN,12,Font.BOLD)));
            doc.add(paragraph);
    }
    private static void addEmptyLine(Paragraph paragraph, int number){
        for (int i=0; i<number; i++){
            paragraph.add(new Paragraph(""));
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 